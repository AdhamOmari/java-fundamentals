/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;

public class Library {



    public static int[] roll(int n) {
        int[] arry = new int[n];
        for (int index = 0; index < arry.length; index++) {
            int random = (int) Math.ceil(Math.random() * 6);
            arry[index]=random;
        }




        System.out.println(Arrays.toString(arry) );








        return arry;
    }



    public static double avgArray(int[] array) {
        double sum = 0;
        for (int value : array) {
            sum += value;
        }
        return (sum / array.length);
    }
    public static boolean containsDuplicates(int[] arr) {

        for (int index = 0; index < arr.length; index++) {
            for (int indexArry02 = index + 1; indexArry02 < arr.length; indexArry02++) {

                if (arr[index] == arr[indexArry02]) {

//
                    return true;
                }
            }
        }
        return false;

    }
    public static int[] arrayOfArrays(int [][] arr){

        double [] avargesArry =new double[arr.length];
        double AvgResult =0;
        for (int index=0;index<arr.length;index++){
            double sum = 0;
            double arrLength=0;
            for (int indexArry02 =0;indexArry02<arr[index].length;indexArry02++){
                sum += arr[index][indexArry02];
            }

//            avargesArry[index]=sum/arr[index].length;
        }

        AvgResult=avargesArry[0];
        int lewestArryAvg=0;
        for (int i = 1; i < avargesArry.length; i++) {
            if (avargesArry[i] < AvgResult) {
                AvgResult = avargesArry[i];
                lewestArryAvg=i;
            }
        }

        return arr[lewestArryAvg];
    }
    public boolean someLibraryMethod() {
        return true;

    }


    public static String analyzeWeathData(int[][] data) {
        HashSet<Integer> Tempratuer = new HashSet<>();
        for (int i = 0; i < data.length; i++) {
            for (int temp : data[i]) {
                Tempratuer.add(temp);
            }
        }

        String minTemp = "Low Temperature " + Collections.min(Tempratuer);
        String maxTemp = "\nHigh Temperature " + Collections.max(Tempratuer);
        String neverSawTemp = "";
        for (int i = Collections.min(Tempratuer); i < Collections.max(Tempratuer); i++) {
            if (!Tempratuer.contains(i)) {
                neverSawTemp += "\nNever saw temperature: " + i;

            }
        }
        return minTemp + maxTemp + neverSawTemp;

    }


    public static String tally(List<String> votes) {
        if (votes.isEmpty()) return "0";

        HashSet<String> votedvalue = new HashSet<>();
        votedvalue.addAll(votes);

        int numVotes = 0;
        String winner = null;

        for (String value : votedvalue) {
            int count = Collections.frequency(votes, value);
            if (numVotes < count) {
                numVotes = count;

                winner = "\n"+ value + " received the most votes!";
            }
        }

        return winner;
    }


}


